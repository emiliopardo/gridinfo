{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/templates/gridinfo.html","webpack:///./src/impl/ol/js/gridinfocontrol.js","webpack:///./src/facade/js/gridinfocontrol.js","webpack:///./src/facade/js/gridinfo.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","GridinfoControl","M","impl","Control","map","html","getMapImpl","values_","target","config","utils","isUndefined","GridinfoImplControl","exception","wfsUrl","wmsUrl","layer","wfsLayer","url","map_","zoom","info","geoJSON","popup","popupInfo","start","totalFeatures","batchsize","limit","selectedFeature","getInfoFeature","getInfoQuery","polygonStyle","style","Polygon","fill","color","opacity","stroke","width","polygonSelectedStyle","polygonSelectedStyle2","vectorLayer","GeoJSON","source","crs","properties","type","features","extract","renderMode","Promise","success","fail","template","compileSync","addEvents","querySelector","control","this","addLayers","on","evt","HOVER_FEATURES","feature","selectedDataShow","LEAVE_FEATURES","setStyle","selectedDataHide","SELECT_FEATURES","udpateStyle","getFeatures","COMPLETED","clear","getZoom","selectedGrid","getLoadedGridWMS","getLayers","gridInfoFields","setGridFieldInfo","fieldsFilter","setCQLFieldsFilter","propertyNames","setPropertyNames","bbox","getBbox","bboxFilter","setCQLBboxFiler","encodeURI","incrementalLoad","ADDED_WMS","CLICK","event","getLoadedLayer","mapClick","coord","imageClick","pixel","layerUrl","getImpl","layerName","layerStyle","options","styles","mapBbox","imageSize","getSize","getInfoUrl","x","min","y","max","remote","then","res","myContent","text","search","featureTabOpts","icon","title","content","Popup","panMapIfOutOfView","addTab","addPopup","document","getElementsByClassName","addEventListener","layers","loadedLayer","index","length","WMS","isGridLayer","result","element","wmsLayer","find","fields","wfs","JSON","parse","undefined","Math","wfsFeatures","forEach","f","newFeat","Feature","id","geom","getGeometry","coordinates","setGeometry","getId","push","addFeatures","console","log","gridCenter","getPolygonCenter","coordenada_X","coordenada_Y","setInfoTable","setTimeout","geometry","minPointX","minPointY","setInfoPopUp","removePopup","filter","field","minValue","table","getAttribute","Gridinfo","Plugin","controls_","metadata_","api","metadata","control_","panel_","ui","Panel","collapsible","position","TL","className","collapsedButtonClass","tooltip","addControls","addPanels","ADDED_TO_MAP","fire","window","plugin","M$plugin$Gridinfo","M$control$GridinfoControl","M$impl$control$GridinfoControl"],"mappings":"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","file":"gridinfo.ol.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = \"<div id=\\\"div-contenedor\\\" class=\\\"m-control m-container m-gridinfo\\\">\\r\\n  <button id=\\\"ctrlTest\\\" class=\\\"g-cartografia-bandera\\\" title=\\\"AddFeature\\\"></button>\\r\\n</div>\\r\\n\";","/**\r\n * @module M/impl/control/GridinfoControl\r\n */\r\nexport default class GridinfoControl extends M.impl.Control {\r\n  /**\r\n   * This function adds the control to the specified map\r\n   *\r\n   * @public\r\n   * @function\r\n   * @param {M.Map} map to add the plugin\r\n   * @param {HTMLElement} html of the plugin\r\n   * @api stable\r\n   */\r\n  addTo(map, html) {\r\n    // super addTo - don't delete\r\n    super.addTo(map, html);\r\n  }\r\n\r\n  getTarget(map){\r\n    const olMap = map.getMapImpl();\r\n    return olMap.values_.target;\r\n  }\r\n}\r\n","/* eslint-disable no-console */\r\n/**\r\n * @module M/control/GridinfoControl\r\n */\r\n\r\nimport GridinfoImplControl from 'impl/gridinfocontrol';\r\nimport template from 'templates/gridinfo';\r\nexport default class GridinfoControl extends M.Control {\r\n  /**\r\n   * @classdesc\r\n   * Main constructor of the class. Creates a PluginControl\r\n   * control\r\n   *\r\n   * @constructor\r\n   * @extends {M.Control}\r\n   * @api stable\r\n   */\r\n  constructor(config) {\r\n    // 1. checks if the implementation can create PluginControl\r\n    if (M.utils.isUndefined(GridinfoImplControl)) {\r\n      M.exception('La implementación usada no puede crear controles GridinfoControl');\r\n    }\r\n    // 2. implementation of this control\r\n    const impl = new GridinfoImplControl();\r\n    super(impl, 'Gridinfo');\r\n    this.config = config\r\n    this.wfsUrl = this.config.wfsUrl;\r\n    this.wmsUrl = this.config.wmsUrl;\r\n    this.layer = this.config.wfsLayer;\r\n    this.url = null;\r\n    this.map_ = this.map\r\n    this.zoom = this.config.zoom;\r\n    this.info = this.config.info;\r\n    this.geoJSON = null;\r\n    this.popup = null;\r\n    this.popupInfo = null;\r\n    this.start = null;\r\n    this.totalFeatures = null;\r\n    this.batchsize = 100;\r\n    this.limit = 1000;\r\n    this.selectedFeature = null;\r\n    this.getInfoFeature = null;\r\n    this.getInfoQuery = false;\r\n    this.polygonStyle = new M.style.Polygon({\r\n      fill: {\r\n        color: '#ffffff',\r\n        opacity: 0,\r\n      },\r\n      stroke: {\r\n        color: '#cdcdcd',\r\n        width: 0.1\r\n      }\r\n    });\r\n\r\n    this.polygonSelectedStyle = new M.style.Polygon({\r\n      fill: {\r\n        color: '#FFFFFF',\r\n        opacity: 0,\r\n      },\r\n      stroke: {\r\n        color: '#FFFF00',\r\n        width: 4\r\n      }\r\n    });\r\n\r\n    this.polygonSelectedStyle2 = new M.style.Polygon({\r\n      fill: {\r\n        color: '#FFFFFF',\r\n        opacity: 0,\r\n      },\r\n      stroke: {\r\n        color: '#FF0000',\r\n        width: 4\r\n      }\r\n    });\r\n\r\n    this.vectorLayer = new M.layer.GeoJSON({\r\n      name: 'vectorLayer',\r\n      source: {\r\n        crs: {\r\n          properties: {\r\n            name: 'EPSG:25830'\r\n          },\r\n          type: 'name'\r\n        },\r\n        features: [],\r\n        type: 'FeatureCollection'\r\n      },\r\n      extract: false,\r\n    }, {\r\n    }, {\r\n      renderMode: 'image'\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * This function creates the view\r\n   *\r\n   * @public\r\n   * @function\r\n   * @param {M.Map} map to add the control\r\n   * @api stable\r\n   */\r\n  createView(map) {\r\n    return new Promise((success, fail) => {\r\n      const html = M.template.compileSync(template);\r\n      // Añadir código dependiente del DOM\r\n      this.addEvents(html);\r\n      success(html);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This function is called on the control activation\r\n   *\r\n   * @public\r\n   * @function\r\n   * @api stable\r\n   */\r\n  activate() {\r\n    // calls super to manage de/activation\r\n    super.activate();\r\n  }\r\n  /**\r\n   * This function is called on the control deactivation\r\n   *\r\n   * @public\r\n   * @function\r\n   * @api stable\r\n   */\r\n  deactivate() {\r\n    // calls super to manage de/activation\r\n    super.deactivate();\r\n  }\r\n  /**\r\n   * This function gets activation button\r\n   *\r\n   * @public\r\n   * @function\r\n   * @param {HTML} html of control\r\n   * @api stable\r\n   */\r\n  getActivationButton(html) {\r\n    return html.querySelector('.m-gridinfo button');\r\n  }\r\n\r\n  /**\r\n   * This function compares controls\r\n   *\r\n   * @public\r\n   * @function\r\n   * @param {M.Control} control to compare\r\n   * @api stable\r\n   */\r\n  equals(control) {\r\n    return control instanceof GridinfoControl;\r\n  }\r\n\r\n  // Add your own functions\r\n\r\n  addEvents(html) {\r\n    this.map_.addLayers(this.vectorLayer);\r\n\r\n\r\n    this.vectorLayer.on(M.evt.HOVER_FEATURES, (feature) => {\r\n      if (!this.getInfoQuery) {\r\n        this.selectedFeature = feature[0]\r\n        this.selectedDataShow(feature[0])\r\n      }\r\n    });\r\n\r\n\r\n    this.vectorLayer.on(M.evt.LEAVE_FEATURES, (feature) => {\r\n      if (!this.getInfoQuery) {\r\n        feature[0].setStyle(this.polygonStyle);\r\n        this.selectedFeature = null;\r\n        this.selectedDataHide();\r\n      }\r\n    });\r\n\r\n    this.vectorLayer.on(M.evt.SELECT_FEATURES, (feature) => {\r\n      this.getInfoFeature = feature[0];\r\n      this.udpateStyle(this.vectorLayer.getFeatures());\r\n    })\r\n\r\n    let zoom;\r\n    this.map_.on(M.evt.COMPLETED, () => {\r\n      this.map_.getMapImpl().on('moveend', () => {\r\n        this.vectorLayer.clear();\r\n        this.start = 0;\r\n        this.totalFeatures = 0;\r\n        zoom = this.map_.getZoom();\r\n        this.selectedGrid = this.getLoadedGridWMS(this.map_.getLayers());\r\n        if (zoom >= this.zoom && this.selectedGrid) {\r\n          this.gridInfoFields = this.setGridFieldInfo(this.selectedGrid)\r\n          this.fieldsFilter = this.setCQLFieldsFilter(this.gridInfoFields);\r\n          this.propertyNames = this.setPropertyNames(this.gridInfoFields);\r\n          this.bbox = this.map_.getBbox();\r\n          this.bboxFilter = this.setCQLBboxFiler(this.bbox)\r\n          this.url = encodeURI(this.wfsUrl + 'service=WFS&version=2.0.0&request=GetFeature&typeName=' + this.layer + '&CQL_FILTER=' + this.fieldsFilter + ' AND ' + this.bboxFilter + '&propertyName=' + this.propertyNames + '&outputFormat=application/json');\r\n          this.incrementalLoad(this.vectorLayer, this.url, this.start, this.batchsize, this.totalFeatures, this.limit);\r\n        }\r\n        this.udpateStyle(this.vectorLayer.getFeatures());\r\n      });\r\n    });\r\n\r\n    this.map_.on(M.evt.ADDED_WMS, () => {\r\n      this.vectorLayer.clear();\r\n      this.start = 0;\r\n      this.totalFeatures = 0;\r\n      zoom = this.map_.getZoom();\r\n      this.selectedGrid = this.getLoadedGridWMS(this.map_.getLayers());\r\n      if (zoom >= this.zoom && this.selectedGrid) {\r\n        this.gridInfoFields = this.setGridFieldInfo(this.selectedGrid)\r\n        this.fieldsFilter = this.setCQLFieldsFilter(this.gridInfoFields);\r\n        this.propertyNames = this.setPropertyNames(this.gridInfoFields);\r\n        this.bbox = this.map_.getBbox();\r\n        this.bboxFilter = this.setCQLBboxFiler(this.bbox)\r\n        this.url = encodeURI(this.wfsUrl + 'service=WFS&version=2.0.0&request=GetFeature&typeName=' + this.layer + '&CQL_FILTER=' + this.fieldsFilter + ' AND ' + this.bboxFilter + '&propertyName=' + this.propertyNames + '&outputFormat=application/json');\r\n        this.incrementalLoad(this.vectorLayer, this.url, this.start, this.batchsize, this.totalFeatures, this.limit);\r\n      }\r\n    })\r\n\r\n    this.map_.on(M.evt.CLICK, (event) => {\r\n      let layer = this.getLoadedLayer(this.map_.getLayers());\r\n      if (this.selectedFeature) {\r\n        this.selectedFeature.setStyle(this.polygonStyle)\r\n        this.getInfoQuery = true;\r\n        this.udpateStyle(this.vectorLayer.getFeatures())\r\n      }\r\n      if (layer) {\r\n        let mapClick = event.coord;\r\n        let imageClick = event.pixel;\r\n        let layerUrl = layer.getImpl().url\r\n        let layerName = layer.name\r\n        let layerStyle = layer.options.styles\r\n        let mapBbox = this.map_.getBbox();\r\n        let imageSize = this.map_.getImpl().map_.getSize()\r\n        let getInfoUrl = layerUrl + 'request=GetFeatureInfo&service=WMS&version=1.1.1&layers=' + layerName + '&styles=' + layerStyle + '&srs=EPSG:25830&format=image/png&bbox=' + mapBbox.x.min + ',' + mapBbox.y.min + ',' + mapBbox.x.max + ',' + mapBbox.y.max + '&width=' + imageSize[0] + '&height=' + imageSize[1] + '&query_layers=' + layerName + '&info_format=text/html&feature_count=1&x=' + imageClick[0] + '&y=' + imageClick[1] + '&exceptions=application/vnd.ogc.se_xml';\r\n        //M.dialog.info('<div class=\"loader\"></div>')\r\n        M.remote.get(getInfoUrl).then((res) => {\r\n          let myContent = res.text\r\n          if (myContent.search('<table ') != -1) {\r\n            let featureTabOpts = {\r\n              icon: 'g-cartografia-pin',\r\n              title: 'Información',\r\n              content: myContent,\r\n            };\r\n            this.popupInfo = new M.Popup({ panMapIfOutOfView: true });\r\n            this.popupInfo.addTab(featureTabOpts);\r\n            this.map_.addPopup(this.popupInfo, [mapClick[0], mapClick[1]]);\r\n            let closePopupButton = document.getElementsByClassName('m-popup-closer')[0]\r\n            closePopupButton.addEventListener('click', () => {\r\n              this.getInfoFeature = null;\r\n              this.udpateStyle(this.vectorLayer.getFeatures())\r\n              this.getInfoQuery = false;\r\n            })\r\n          } else {\r\n            this.getInfoFeature = null;\r\n            this.getInfoQuery = false;\r\n          }\r\n          this.udpateStyle(this.vectorLayer.getFeatures())\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  getLoadedLayer(layers) {\r\n    let loadedLayer = null\r\n    for (let index = 0; index < layers.length; index++) {\r\n      const layer = layers[index];\r\n      if (layer instanceof M.layer.WMS && this.isGridLayer(layer)) {\r\n        loadedLayer = layer\r\n      }\r\n    }\r\n    return loadedLayer\r\n  }\r\n\r\n  getLoadedGridWMS(layers) {\r\n    let selectedGrid = null\r\n    for (let index = 0; index < layers.length; index++) {\r\n      const layer = layers[index];\r\n      if (layer instanceof M.layer.WMS && this.isGridLayer(layer)) {\r\n        selectedGrid = layer.options.styles\r\n      }\r\n    }\r\n    return selectedGrid\r\n  }\r\n\r\n  isGridLayer(layer) {\r\n    let result = false;\r\n    for (let index = 0; index < this.info.length; index++) {\r\n      const element = this.info[index];\r\n      if (layer.getImpl().url == this.wmsUrl && layer.name == element.wmsLayer && element.style == layer.options.styles) {\r\n        // console.log(layer.getImpl().url);\r\n        // console.log(this.wmsUrl);\r\n        // console.log(layer.name);\r\n        // console.log(element.wmsLayer);\r\n        // console.log(layer.options.styles);\r\n        // console.log(element.style);\r\n        result = true\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  setGridFieldInfo(selectedGrid) {\r\n    let find = false\r\n    let gridInfoFields = null\r\n    do {\r\n      for (let index = 0; index < this.info.length; index++) {\r\n        const element = this.info[index];\r\n        if (element.style == selectedGrid) {\r\n          gridInfoFields = element.fields\r\n        }\r\n        if (index == this.info.length - 1) {\r\n          find = true;\r\n        }\r\n      }\r\n    } while (!find);\r\n    return gridInfoFields\r\n  }\r\n\r\n  incrementalLoad(vectorLayer, url, start, batchsize, totalFeatures, limit) {\r\n    // Si es la primera ejecucion o si aun no las hemos cargado todas\r\n    if ((this.totalFeatures == 0) || (this.vectorLayer.getFeatures().length < this.totalFeatures)) {\r\n      // Para no pasarnos si hay limite definido\r\n      if (this.start + this.batchsize > this.limit) {\r\n        this.batchsize = this.limit - this.start;\r\n      }\r\n      M.remote.get(url + '&STARTINDEX=' + this.start + '&COUNT=' + this.batchsize).then((res) => {\r\n        let wfs = JSON.parse(res.text);\r\n        this.totalFeatures = wfs.totalFeatures;\r\n        // Si hay limite, tiene preferencia\r\n        this.totalFeatures = (this.limit === undefined) ? wfs.totalFeatures : Math.min(this.limit, this.totalFeatures);\r\n        let wfsFeatures = wfs.features;\r\n        let features = [];\r\n\r\n        wfsFeatures.forEach((f) => {\r\n          // Se combierte de multipolygon a polygon\r\n          let newFeat = new M.Feature(f.id, f);\r\n          let geom = newFeat.getGeometry();\r\n          geom.type = 'Polygon';\r\n          let coord = geom.coordinates[0];\r\n          geom.coordinates = coord;\r\n          newFeat.setGeometry(geom);\r\n          if (this.getInfoFeature && (newFeat.getId() == this.getInfoFeature.getId())) {\r\n            newFeat.setStyle(this.polygonSelectedStyle2)\r\n          } else {\r\n            newFeat.setStyle(this.polygonStyle)\r\n          }\r\n          features.push(newFeat);\r\n        });\r\n\r\n        this.start = this.start + this.batchsize;\r\n        this.vectorLayer.addFeatures(features);\r\n        // Si aun faltan features por cargar, iteramos\r\n        if (this.vectorLayer.getFeatures().length < this.totalFeatures) {\r\n          this.incrementalLoad(this.vectorLayer, this.url, this.start, this.batchsize, this.totalFeatures, this.limit);\r\n          console.log('faltan por cargar datos')\r\n        } else {\r\n          // const dialogs = document.querySelectorAll('div.m-dialog');\r\n          // Array.prototype.forEach.call(dialogs, (dialog) => {\r\n          //   const parent = dialog.parentElement;\r\n          //   parent.removeChild(dialog);\r\n          // });\r\n          console.log('se cargaron los datos')\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  setInfoPopUp(feature) {\r\n\r\n    let gridCenter = this.getPolygonCenter(feature.getGeometry())\r\n    let coordenada_X = gridCenter[0];\r\n    let coordenada_Y = gridCenter[1];\r\n    let myContent = this.setInfoTable(feature)\r\n    let featureTabOpts = {\r\n      icon: 'g-cartografia-pin',\r\n      title: 'Información',\r\n      content: myContent,\r\n    };\r\n    this.popup = new M.Popup({ panMapIfOutOfView: false });\r\n    this.popup.addTab(featureTabOpts);\r\n    setTimeout(() => {\r\n      this.map_.addPopup(this.popup, [coordenada_X, coordenada_Y]);\r\n    }, 200);\r\n\r\n  }\r\n\r\n  getPolygonCenter(geometry) {\r\n    let minPointX = geometry.coordinates[0][0][0]\r\n    let minPointY = geometry.coordinates[0][0][1]\r\n    let maxPointX = geometry.coordinates[0][2][0]\r\n    let maxPointY = geometry.coordinates[0][2][1]\r\n    let coor_x = ((maxPointX - minPointX) / 2) + minPointX\r\n    let coor_y = ((maxPointY - minPointY) / 2) + minPointY\r\n    return [coor_x, coor_y]\r\n  }\r\n\r\n  selectedDataShow(feature) {\r\n    feature.setStyle(this.polygonSelectedStyle);\r\n    this.setInfoPopUp(feature)\r\n  }\r\n\r\n  selectedDataHide() {\r\n    if (!this.getInfoQuery) {\r\n      this.map_.removePopup(this.popup)\r\n    }\r\n  }\r\n\r\n  setCQLBboxFiler(bbox) {\r\n    return 'BBOX(geom,' + bbox.x.min + ',' + bbox.y.min + ',' + bbox.x.max + ',' + bbox.y.max + ')';\r\n  }\r\n\r\n  setCQLFieldsFilter(gridInfoFields) {\r\n    let filter = null;\r\n    for (let index = 0; index < gridInfoFields.length; index++) {\r\n      const field = gridInfoFields[index];\r\n      if (index == 0) {\r\n        filter = field.field + '>' + field.minValue;\r\n      } else {\r\n        filter += ' AND ' + field.field + '>' + field.minValue\r\n      }\r\n    }\r\n    return filter\r\n  }\r\n\r\n  setPropertyNames(gridInfoFields) {\r\n    let properties = null;\r\n    for (let index = 0; index < gridInfoFields.length; index++) {\r\n      const field = gridInfoFields[index];\r\n      if (index == 0) {\r\n        properties = field.field\r\n      } else {\r\n        properties += ',' + field.field\r\n      }\r\n    }\r\n    properties += ',geom'\r\n    return properties\r\n  }\r\n\r\n  setInfoTable(feature) {\r\n    let table = '<table class=\"info-table\">'\r\n    for (let index = 0; index < this.gridInfoFields.length; index++) {\r\n      const element = this.gridInfoFields[index];\r\n      table += '<tr><td class=\"info-popup-key\">' + element.title + '</td><td class=\"info-popup-value\">' + feature.getAttribute(element.field) + '</td></tr>';\r\n    }\r\n    table += '</table>'\r\n    return table\r\n  }\r\n\r\n  udpateStyle(features) {\r\n    for (let index = 0; index < features.length; index++) {\r\n      const feature = features[index];\r\n      if (this.getInfoFeature && (feature.getId() == this.getInfoFeature.getId())) {\r\n        feature.setStyle(this.polygonSelectedStyle2)\r\n      } else {\r\n        feature.setStyle(this.polygonStyle)\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n","/**\r\n * @module M/plugin/Gridinfo\r\n */\r\nimport 'assets/css/gridinfo';\r\nimport GridinfoControl from './gridinfocontrol';\r\nimport api from '../../api.json';\r\n\r\nexport default class Gridinfo extends M.Plugin {\r\n  /**\r\n   * @classdesc\r\n   * Main facade plugin object. This class creates a plugin\r\n   * object which has an implementation Object\r\n   *\r\n   * @constructor\r\n   * @extends {M.Plugin}\r\n   * @param {Object} impl implementation object\r\n   * @api stable\r\n   */\r\n  constructor(config) {\r\n    super();\r\n    /**\r\n     * Facade of the map\r\n     * @private\r\n     * @type {M.Map}\r\n     */\r\n    this.map_ = null;\r\n    this.config = config\r\n\r\n    /**\r\n     * Array of controls\r\n     * @private\r\n     * @type {Array<M.Control>}\r\n     */\r\n    this.controls_ = [];\r\n\r\n    /**\r\n     * Metadata from api.json\r\n     * @private\r\n     * @type {Object}\r\n     */\r\n    this.metadata_ = api.metadata;\r\n  }\r\n\r\n  /**\r\n   * This function adds this plugin into the map\r\n   *\r\n   * @public\r\n   * @function\r\n   * @param {M.Map} map the map to add the plugin\r\n   * @api stable\r\n   */\r\n  addTo(map) {\r\n    this.control_=new GridinfoControl(this.config)\r\n    this.controls_.push(this.control_);\r\n    this.map_ = map;\r\n    // panel para agregar control - no obligatorio\r\n    this.panel_ = new M.ui.Panel('panelGridinfo', {\r\n      collapsible: true,\r\n      position: M.ui.position.TL,\r\n      className: 'm-gridinfo',\r\n      collapsedButtonClass: 'g-cartografia-info',\r\n      tooltip: 'Consultar Información'\r\n    });\r\n    this.panel_.addControls(this.controls_);\r\n    map.addPanels(this.panel_);\r\n\r\n    this.control_.on(M.evt.ADDED_TO_MAP, () => {\r\n      this.fire(M.evt.ADDED_TO_MAP);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This function gets metadata plugin\r\n   *\r\n   * @public\r\n   * @function\r\n   * @api stable\r\n   */\r\n  getMetadata(){\r\n    return this.metadata_;\r\n  }\r\n}\r\n","import M$plugin$Gridinfo from 'C:/proyectos/gridinfo/src/facade/js/gridinfo';\nimport M$control$GridinfoControl from 'C:/proyectos/gridinfo/src/facade/js/gridinfocontrol';\nimport M$impl$control$GridinfoControl from 'C:/proyectos/gridinfo/src/impl/ol/js/gridinfocontrol';\n\nif (!window.M.plugin) window.M.plugin = {};\nif (!window.M.control) window.M.control = {};\nif (!window.M.impl) window.M.impl = {};\nif (!window.M.impl.control) window.M.impl.control = {};\nwindow.M.plugin.Gridinfo = M$plugin$Gridinfo;\nwindow.M.control.GridinfoControl = M$control$GridinfoControl;\nwindow.M.impl.control.GridinfoControl = M$impl$control$GridinfoControl;\n"],"sourceRoot":""}